Terminals which are not used

   EQUAL
   NOTEQUAL
   INC
   DEC
   GT
   GE
   LT
   LE
   LSHIFT
   RSHIFT
   NOT
   IDENT


Grammar

    0 $accept: program $end

    1 program: expression

    2 expression: primary
    3           | expression ADD expression
    4           | expression SUB expression
    5           | expression MUL expression
    6           | expression DIV expression
    7           | expression MOD expression
    8           | expression BIT_OR expression
    9           | expression BIT_AND expression
   10           | expression EXC_OR expression
   11           | expression LOGIC_OR expression
   12           | expression LOGIC_AND expression
   13           | expression ASSIGN expression
   14           | expression ADD_ASSIGN expression
   15           | expression SUB_ASSIGN expression
   16           | expression MUL_ASSIGN expression
   17           | expression DIV_ASSIGN expression
   18           | expression MOD_ASSIGN expression
   19           | LP expression RP

   20 primary: INT
   21        | DOUBLE


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 20
DOUBLE (259) 21
ADD (260) 3
SUB (261) 4
MUL (262) 5
DIV (263) 6
MOD (264) 7
ASSIGN (265) 13
ADD_ASSIGN (266) 14
SUB_ASSIGN (267) 15
MUL_ASSIGN (268) 16
DIV_ASSIGN (269) 17
MOD_ASSIGN (270) 18
EQUAL (271)
NOTEQUAL (272)
INC (273)
DEC (274)
GT (275)
GE (276)
LT (277)
LE (278)
LSHIFT (279)
RSHIFT (280)
NOT (281)
BIT_AND (282) 9
BIT_OR (283) 8
LOGIC_AND (284) 12
LOGIC_OR (285) 11
LP (286) 19
RP (287) 19
EXC_OR (288) 10
IDENT (289)


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 1, on right: 0
expression (37)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19,
    on right: 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
primary (38)
    on left: 20 21, on right: 2


state 0

    0 $accept: . program $end
    1 program: . expression
    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    program     go to state 4
    expression  go to state 5
    primary     go to state 6


state 1

   20 primary: INT .

    $default  reduce using rule 20 (primary)


state 2

   21 primary: DOUBLE .

    $default  reduce using rule 21 (primary)


state 3

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   19           | LP . expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 7
    primary     go to state 6


state 4

    0 $accept: program . $end

    $end  shift, and go to state 8


state 5

    1 program: expression .  [$end]
    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ADD         shift, and go to state 9
    SUB         shift, and go to state 10
    MUL         shift, and go to state 11
    DIV         shift, and go to state 12
    MOD         shift, and go to state 13
    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    BIT_AND     shift, and go to state 20
    BIT_OR      shift, and go to state 21
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23
    EXC_OR      shift, and go to state 24

    $default  reduce using rule 1 (program)


state 6

    2 expression: primary .

    $default  reduce using rule 2 (expression)


state 7

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression
   19           | LP expression . RP

    ADD         shift, and go to state 9
    SUB         shift, and go to state 10
    MUL         shift, and go to state 11
    DIV         shift, and go to state 12
    MOD         shift, and go to state 13
    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    BIT_AND     shift, and go to state 20
    BIT_OR      shift, and go to state 21
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23
    RP          shift, and go to state 25
    EXC_OR      shift, and go to state 24


state 8

    0 $accept: program $end .

    $default  accept


state 9

    2 expression: . primary
    3           | . expression ADD expression
    3           | expression ADD . expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 26
    primary     go to state 6


state 10

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    4           | expression SUB . expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 27
    primary     go to state 6


state 11

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    5           | expression MUL . expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 28
    primary     go to state 6


state 12

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    6           | expression DIV . expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 29
    primary     go to state 6


state 13

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    7           | expression MOD . expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 30
    primary     go to state 6


state 14

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   13           | expression ASSIGN . expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 31
    primary     go to state 6


state 15

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   14           | expression ADD_ASSIGN . expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 32
    primary     go to state 6


state 16

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   15           | expression SUB_ASSIGN . expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 33
    primary     go to state 6


state 17

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   16           | expression MUL_ASSIGN . expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 34
    primary     go to state 6


state 18

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   17           | expression DIV_ASSIGN . expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 35
    primary     go to state 6


state 19

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   18           | expression MOD_ASSIGN . expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 36
    primary     go to state 6


state 20

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
    9           | expression BIT_AND . expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 37
    primary     go to state 6


state 21

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    8           | expression BIT_OR . expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 38
    primary     go to state 6


state 22

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   12           | expression LOGIC_AND . expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 39
    primary     go to state 6


state 23

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   11           | . expression LOGIC_OR expression
   11           | expression LOGIC_OR . expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 40
    primary     go to state 6


state 24

    2 expression: . primary
    3           | . expression ADD expression
    4           | . expression SUB expression
    5           | . expression MUL expression
    6           | . expression DIV expression
    7           | . expression MOD expression
    8           | . expression BIT_OR expression
    9           | . expression BIT_AND expression
   10           | . expression EXC_OR expression
   10           | expression EXC_OR . expression
   11           | . expression LOGIC_OR expression
   12           | . expression LOGIC_AND expression
   13           | . expression ASSIGN expression
   14           | . expression ADD_ASSIGN expression
   15           | . expression SUB_ASSIGN expression
   16           | . expression MUL_ASSIGN expression
   17           | . expression DIV_ASSIGN expression
   18           | . expression MOD_ASSIGN expression
   19           | . LP expression RP
   20 primary: . INT
   21        | . DOUBLE

    INT     shift, and go to state 1
    DOUBLE  shift, and go to state 2
    LP      shift, and go to state 3

    expression  go to state 41
    primary     go to state 6


state 25

   19 expression: LP expression RP .

    $default  reduce using rule 19 (expression)


state 26

    3 expression: expression . ADD expression  [$end, ADD, SUB, RP]
    3           | expression ADD expression .  [$end, ADD, SUB, RP]
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    MUL         shift, and go to state 11
    DIV         shift, and go to state 12
    MOD         shift, and go to state 13
    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    BIT_AND     shift, and go to state 20
    BIT_OR      shift, and go to state 21
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23
    EXC_OR      shift, and go to state 24

    $default  reduce using rule 3 (expression)

    Conflict between rule 3 and token ADD resolved as reduce (%left ADD).
    Conflict between rule 3 and token SUB resolved as reduce (%left SUB).
    Conflict between rule 3 and token MUL resolved as shift (ADD < MUL).
    Conflict between rule 3 and token DIV resolved as shift (ADD < DIV).
    Conflict between rule 3 and token MOD resolved as shift (ADD < MOD).
    Conflict between rule 3 and token ASSIGN resolved as shift (ADD < ASSIGN).
    Conflict between rule 3 and token ADD_ASSIGN resolved as shift (ADD < ADD_ASSIGN).
    Conflict between rule 3 and token SUB_ASSIGN resolved as shift (ADD < SUB_ASSIGN).
    Conflict between rule 3 and token MUL_ASSIGN resolved as shift (ADD < MUL_ASSIGN).
    Conflict between rule 3 and token DIV_ASSIGN resolved as shift (ADD < DIV_ASSIGN).
    Conflict between rule 3 and token MOD_ASSIGN resolved as shift (ADD < MOD_ASSIGN).
    Conflict between rule 3 and token BIT_AND resolved as shift (ADD < BIT_AND).
    Conflict between rule 3 and token BIT_OR resolved as shift (ADD < BIT_OR).
    Conflict between rule 3 and token LOGIC_AND resolved as shift (ADD < LOGIC_AND).
    Conflict between rule 3 and token LOGIC_OR resolved as shift (ADD < LOGIC_OR).
    Conflict between rule 3 and token EXC_OR resolved as shift (ADD < EXC_OR).


state 27

    3 expression: expression . ADD expression
    4           | expression . SUB expression  [$end, ADD, SUB, RP]
    4           | expression SUB expression .  [$end, ADD, SUB, RP]
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    MUL         shift, and go to state 11
    DIV         shift, and go to state 12
    MOD         shift, and go to state 13
    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    BIT_AND     shift, and go to state 20
    BIT_OR      shift, and go to state 21
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23
    EXC_OR      shift, and go to state 24

    $default  reduce using rule 4 (expression)

    Conflict between rule 4 and token ADD resolved as reduce (%left ADD).
    Conflict between rule 4 and token SUB resolved as reduce (%left SUB).
    Conflict between rule 4 and token MUL resolved as shift (SUB < MUL).
    Conflict between rule 4 and token DIV resolved as shift (SUB < DIV).
    Conflict between rule 4 and token MOD resolved as shift (SUB < MOD).
    Conflict between rule 4 and token ASSIGN resolved as shift (SUB < ASSIGN).
    Conflict between rule 4 and token ADD_ASSIGN resolved as shift (SUB < ADD_ASSIGN).
    Conflict between rule 4 and token SUB_ASSIGN resolved as shift (SUB < SUB_ASSIGN).
    Conflict between rule 4 and token MUL_ASSIGN resolved as shift (SUB < MUL_ASSIGN).
    Conflict between rule 4 and token DIV_ASSIGN resolved as shift (SUB < DIV_ASSIGN).
    Conflict between rule 4 and token MOD_ASSIGN resolved as shift (SUB < MOD_ASSIGN).
    Conflict between rule 4 and token BIT_AND resolved as shift (SUB < BIT_AND).
    Conflict between rule 4 and token BIT_OR resolved as shift (SUB < BIT_OR).
    Conflict between rule 4 and token LOGIC_AND resolved as shift (SUB < LOGIC_AND).
    Conflict between rule 4 and token LOGIC_OR resolved as shift (SUB < LOGIC_OR).
    Conflict between rule 4 and token EXC_OR resolved as shift (SUB < EXC_OR).


state 28

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression  [$end, ADD, SUB, MUL, DIV, MOD, RP]
    5           | expression MUL expression .  [$end, ADD, SUB, MUL, DIV, MOD, RP]
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    BIT_AND     shift, and go to state 20
    BIT_OR      shift, and go to state 21
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23
    EXC_OR      shift, and go to state 24

    $default  reduce using rule 5 (expression)

    Conflict between rule 5 and token ADD resolved as reduce (ADD < MUL).
    Conflict between rule 5 and token SUB resolved as reduce (SUB < MUL).
    Conflict between rule 5 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 5 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 5 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 5 and token ASSIGN resolved as shift (MUL < ASSIGN).
    Conflict between rule 5 and token ADD_ASSIGN resolved as shift (MUL < ADD_ASSIGN).
    Conflict between rule 5 and token SUB_ASSIGN resolved as shift (MUL < SUB_ASSIGN).
    Conflict between rule 5 and token MUL_ASSIGN resolved as shift (MUL < MUL_ASSIGN).
    Conflict between rule 5 and token DIV_ASSIGN resolved as shift (MUL < DIV_ASSIGN).
    Conflict between rule 5 and token MOD_ASSIGN resolved as shift (MUL < MOD_ASSIGN).
    Conflict between rule 5 and token BIT_AND resolved as shift (MUL < BIT_AND).
    Conflict between rule 5 and token BIT_OR resolved as shift (MUL < BIT_OR).
    Conflict between rule 5 and token LOGIC_AND resolved as shift (MUL < LOGIC_AND).
    Conflict between rule 5 and token LOGIC_OR resolved as shift (MUL < LOGIC_OR).
    Conflict between rule 5 and token EXC_OR resolved as shift (MUL < EXC_OR).


state 29

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression  [$end, ADD, SUB, MUL, DIV, MOD, RP]
    6           | expression DIV expression .  [$end, ADD, SUB, MUL, DIV, MOD, RP]
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    BIT_AND     shift, and go to state 20
    BIT_OR      shift, and go to state 21
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23
    EXC_OR      shift, and go to state 24

    $default  reduce using rule 6 (expression)

    Conflict between rule 6 and token ADD resolved as reduce (ADD < DIV).
    Conflict between rule 6 and token SUB resolved as reduce (SUB < DIV).
    Conflict between rule 6 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 6 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 6 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 6 and token ASSIGN resolved as shift (DIV < ASSIGN).
    Conflict between rule 6 and token ADD_ASSIGN resolved as shift (DIV < ADD_ASSIGN).
    Conflict between rule 6 and token SUB_ASSIGN resolved as shift (DIV < SUB_ASSIGN).
    Conflict between rule 6 and token MUL_ASSIGN resolved as shift (DIV < MUL_ASSIGN).
    Conflict between rule 6 and token DIV_ASSIGN resolved as shift (DIV < DIV_ASSIGN).
    Conflict between rule 6 and token MOD_ASSIGN resolved as shift (DIV < MOD_ASSIGN).
    Conflict between rule 6 and token BIT_AND resolved as shift (DIV < BIT_AND).
    Conflict between rule 6 and token BIT_OR resolved as shift (DIV < BIT_OR).
    Conflict between rule 6 and token LOGIC_AND resolved as shift (DIV < LOGIC_AND).
    Conflict between rule 6 and token LOGIC_OR resolved as shift (DIV < LOGIC_OR).
    Conflict between rule 6 and token EXC_OR resolved as shift (DIV < EXC_OR).


state 30

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression  [$end, ADD, SUB, MUL, DIV, MOD, RP]
    7           | expression MOD expression .  [$end, ADD, SUB, MUL, DIV, MOD, RP]
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    BIT_AND     shift, and go to state 20
    BIT_OR      shift, and go to state 21
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23
    EXC_OR      shift, and go to state 24

    $default  reduce using rule 7 (expression)

    Conflict between rule 7 and token ADD resolved as reduce (ADD < MOD).
    Conflict between rule 7 and token SUB resolved as reduce (SUB < MOD).
    Conflict between rule 7 and token MUL resolved as reduce (%left MUL).
    Conflict between rule 7 and token DIV resolved as reduce (%left DIV).
    Conflict between rule 7 and token MOD resolved as reduce (%left MOD).
    Conflict between rule 7 and token ASSIGN resolved as shift (MOD < ASSIGN).
    Conflict between rule 7 and token ADD_ASSIGN resolved as shift (MOD < ADD_ASSIGN).
    Conflict between rule 7 and token SUB_ASSIGN resolved as shift (MOD < SUB_ASSIGN).
    Conflict between rule 7 and token MUL_ASSIGN resolved as shift (MOD < MUL_ASSIGN).
    Conflict between rule 7 and token DIV_ASSIGN resolved as shift (MOD < DIV_ASSIGN).
    Conflict between rule 7 and token MOD_ASSIGN resolved as shift (MOD < MOD_ASSIGN).
    Conflict between rule 7 and token BIT_AND resolved as shift (MOD < BIT_AND).
    Conflict between rule 7 and token BIT_OR resolved as shift (MOD < BIT_OR).
    Conflict between rule 7 and token LOGIC_AND resolved as shift (MOD < LOGIC_AND).
    Conflict between rule 7 and token LOGIC_OR resolved as shift (MOD < LOGIC_OR).
    Conflict between rule 7 and token EXC_OR resolved as shift (MOD < EXC_OR).


state 31

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   13           | expression ASSIGN expression .  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19

    $default  reduce using rule 13 (expression)

    Conflict between rule 13 and token ADD resolved as reduce (ADD < ASSIGN).
    Conflict between rule 13 and token SUB resolved as reduce (SUB < ASSIGN).
    Conflict between rule 13 and token MUL resolved as reduce (MUL < ASSIGN).
    Conflict between rule 13 and token DIV resolved as reduce (DIV < ASSIGN).
    Conflict between rule 13 and token MOD resolved as reduce (MOD < ASSIGN).
    Conflict between rule 13 and token ASSIGN resolved as shift (%right ASSIGN).
    Conflict between rule 13 and token ADD_ASSIGN resolved as shift (ASSIGN < ADD_ASSIGN).
    Conflict between rule 13 and token SUB_ASSIGN resolved as shift (ASSIGN < SUB_ASSIGN).
    Conflict between rule 13 and token MUL_ASSIGN resolved as shift (ASSIGN < MUL_ASSIGN).
    Conflict between rule 13 and token DIV_ASSIGN resolved as shift (ASSIGN < DIV_ASSIGN).
    Conflict between rule 13 and token MOD_ASSIGN resolved as shift (ASSIGN < MOD_ASSIGN).
    Conflict between rule 13 and token BIT_AND resolved as reduce (BIT_AND < ASSIGN).
    Conflict between rule 13 and token BIT_OR resolved as reduce (BIT_OR < ASSIGN).
    Conflict between rule 13 and token LOGIC_AND resolved as reduce (LOGIC_AND < ASSIGN).
    Conflict between rule 13 and token LOGIC_OR resolved as reduce (LOGIC_OR < ASSIGN).
    Conflict between rule 13 and token EXC_OR resolved as reduce (EXC_OR < ASSIGN).


state 32

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   14           | expression ADD_ASSIGN expression .  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19

    $default  reduce using rule 14 (expression)

    Conflict between rule 14 and token ADD resolved as reduce (ADD < ADD_ASSIGN).
    Conflict between rule 14 and token SUB resolved as reduce (SUB < ADD_ASSIGN).
    Conflict between rule 14 and token MUL resolved as reduce (MUL < ADD_ASSIGN).
    Conflict between rule 14 and token DIV resolved as reduce (DIV < ADD_ASSIGN).
    Conflict between rule 14 and token MOD resolved as reduce (MOD < ADD_ASSIGN).
    Conflict between rule 14 and token ASSIGN resolved as reduce (ASSIGN < ADD_ASSIGN).
    Conflict between rule 14 and token ADD_ASSIGN resolved as shift (%right ADD_ASSIGN).
    Conflict between rule 14 and token SUB_ASSIGN resolved as shift (%right SUB_ASSIGN).
    Conflict between rule 14 and token MUL_ASSIGN resolved as shift (%right MUL_ASSIGN).
    Conflict between rule 14 and token DIV_ASSIGN resolved as shift (%right DIV_ASSIGN).
    Conflict between rule 14 and token MOD_ASSIGN resolved as shift (%right MOD_ASSIGN).
    Conflict between rule 14 and token BIT_AND resolved as reduce (BIT_AND < ADD_ASSIGN).
    Conflict between rule 14 and token BIT_OR resolved as reduce (BIT_OR < ADD_ASSIGN).
    Conflict between rule 14 and token LOGIC_AND resolved as reduce (LOGIC_AND < ADD_ASSIGN).
    Conflict between rule 14 and token LOGIC_OR resolved as reduce (LOGIC_OR < ADD_ASSIGN).
    Conflict between rule 14 and token EXC_OR resolved as reduce (EXC_OR < ADD_ASSIGN).


state 33

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   15           | expression SUB_ASSIGN expression .  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19

    $default  reduce using rule 15 (expression)

    Conflict between rule 15 and token ADD resolved as reduce (ADD < SUB_ASSIGN).
    Conflict between rule 15 and token SUB resolved as reduce (SUB < SUB_ASSIGN).
    Conflict between rule 15 and token MUL resolved as reduce (MUL < SUB_ASSIGN).
    Conflict between rule 15 and token DIV resolved as reduce (DIV < SUB_ASSIGN).
    Conflict between rule 15 and token MOD resolved as reduce (MOD < SUB_ASSIGN).
    Conflict between rule 15 and token ASSIGN resolved as reduce (ASSIGN < SUB_ASSIGN).
    Conflict between rule 15 and token ADD_ASSIGN resolved as shift (%right ADD_ASSIGN).
    Conflict between rule 15 and token SUB_ASSIGN resolved as shift (%right SUB_ASSIGN).
    Conflict between rule 15 and token MUL_ASSIGN resolved as shift (%right MUL_ASSIGN).
    Conflict between rule 15 and token DIV_ASSIGN resolved as shift (%right DIV_ASSIGN).
    Conflict between rule 15 and token MOD_ASSIGN resolved as shift (%right MOD_ASSIGN).
    Conflict between rule 15 and token BIT_AND resolved as reduce (BIT_AND < SUB_ASSIGN).
    Conflict between rule 15 and token BIT_OR resolved as reduce (BIT_OR < SUB_ASSIGN).
    Conflict between rule 15 and token LOGIC_AND resolved as reduce (LOGIC_AND < SUB_ASSIGN).
    Conflict between rule 15 and token LOGIC_OR resolved as reduce (LOGIC_OR < SUB_ASSIGN).
    Conflict between rule 15 and token EXC_OR resolved as reduce (EXC_OR < SUB_ASSIGN).


state 34

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   16           | expression MUL_ASSIGN expression .  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19

    $default  reduce using rule 16 (expression)

    Conflict between rule 16 and token ADD resolved as reduce (ADD < MUL_ASSIGN).
    Conflict between rule 16 and token SUB resolved as reduce (SUB < MUL_ASSIGN).
    Conflict between rule 16 and token MUL resolved as reduce (MUL < MUL_ASSIGN).
    Conflict between rule 16 and token DIV resolved as reduce (DIV < MUL_ASSIGN).
    Conflict between rule 16 and token MOD resolved as reduce (MOD < MUL_ASSIGN).
    Conflict between rule 16 and token ASSIGN resolved as reduce (ASSIGN < MUL_ASSIGN).
    Conflict between rule 16 and token ADD_ASSIGN resolved as shift (%right ADD_ASSIGN).
    Conflict between rule 16 and token SUB_ASSIGN resolved as shift (%right SUB_ASSIGN).
    Conflict between rule 16 and token MUL_ASSIGN resolved as shift (%right MUL_ASSIGN).
    Conflict between rule 16 and token DIV_ASSIGN resolved as shift (%right DIV_ASSIGN).
    Conflict between rule 16 and token MOD_ASSIGN resolved as shift (%right MOD_ASSIGN).
    Conflict between rule 16 and token BIT_AND resolved as reduce (BIT_AND < MUL_ASSIGN).
    Conflict between rule 16 and token BIT_OR resolved as reduce (BIT_OR < MUL_ASSIGN).
    Conflict between rule 16 and token LOGIC_AND resolved as reduce (LOGIC_AND < MUL_ASSIGN).
    Conflict between rule 16 and token LOGIC_OR resolved as reduce (LOGIC_OR < MUL_ASSIGN).
    Conflict between rule 16 and token EXC_OR resolved as reduce (EXC_OR < MUL_ASSIGN).


state 35

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   17           | expression DIV_ASSIGN expression .  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   18           | expression . MOD_ASSIGN expression

    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19

    $default  reduce using rule 17 (expression)

    Conflict between rule 17 and token ADD resolved as reduce (ADD < DIV_ASSIGN).
    Conflict between rule 17 and token SUB resolved as reduce (SUB < DIV_ASSIGN).
    Conflict between rule 17 and token MUL resolved as reduce (MUL < DIV_ASSIGN).
    Conflict between rule 17 and token DIV resolved as reduce (DIV < DIV_ASSIGN).
    Conflict between rule 17 and token MOD resolved as reduce (MOD < DIV_ASSIGN).
    Conflict between rule 17 and token ASSIGN resolved as reduce (ASSIGN < DIV_ASSIGN).
    Conflict between rule 17 and token ADD_ASSIGN resolved as shift (%right ADD_ASSIGN).
    Conflict between rule 17 and token SUB_ASSIGN resolved as shift (%right SUB_ASSIGN).
    Conflict between rule 17 and token MUL_ASSIGN resolved as shift (%right MUL_ASSIGN).
    Conflict between rule 17 and token DIV_ASSIGN resolved as shift (%right DIV_ASSIGN).
    Conflict between rule 17 and token MOD_ASSIGN resolved as shift (%right MOD_ASSIGN).
    Conflict between rule 17 and token BIT_AND resolved as reduce (BIT_AND < DIV_ASSIGN).
    Conflict between rule 17 and token BIT_OR resolved as reduce (BIT_OR < DIV_ASSIGN).
    Conflict between rule 17 and token LOGIC_AND resolved as reduce (LOGIC_AND < DIV_ASSIGN).
    Conflict between rule 17 and token LOGIC_OR resolved as reduce (LOGIC_OR < DIV_ASSIGN).
    Conflict between rule 17 and token EXC_OR resolved as reduce (EXC_OR < DIV_ASSIGN).


state 36

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   18           | expression MOD_ASSIGN expression .  [$end, ADD, SUB, MUL, DIV, MOD, ASSIGN, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]

    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19

    $default  reduce using rule 18 (expression)

    Conflict between rule 18 and token ADD resolved as reduce (ADD < MOD_ASSIGN).
    Conflict between rule 18 and token SUB resolved as reduce (SUB < MOD_ASSIGN).
    Conflict between rule 18 and token MUL resolved as reduce (MUL < MOD_ASSIGN).
    Conflict between rule 18 and token DIV resolved as reduce (DIV < MOD_ASSIGN).
    Conflict between rule 18 and token MOD resolved as reduce (MOD < MOD_ASSIGN).
    Conflict between rule 18 and token ASSIGN resolved as reduce (ASSIGN < MOD_ASSIGN).
    Conflict between rule 18 and token ADD_ASSIGN resolved as shift (%right ADD_ASSIGN).
    Conflict between rule 18 and token SUB_ASSIGN resolved as shift (%right SUB_ASSIGN).
    Conflict between rule 18 and token MUL_ASSIGN resolved as shift (%right MUL_ASSIGN).
    Conflict between rule 18 and token DIV_ASSIGN resolved as shift (%right DIV_ASSIGN).
    Conflict between rule 18 and token MOD_ASSIGN resolved as shift (%right MOD_ASSIGN).
    Conflict between rule 18 and token BIT_AND resolved as reduce (BIT_AND < MOD_ASSIGN).
    Conflict between rule 18 and token BIT_OR resolved as reduce (BIT_OR < MOD_ASSIGN).
    Conflict between rule 18 and token LOGIC_AND resolved as reduce (LOGIC_AND < MOD_ASSIGN).
    Conflict between rule 18 and token LOGIC_OR resolved as reduce (LOGIC_OR < MOD_ASSIGN).
    Conflict between rule 18 and token EXC_OR resolved as reduce (EXC_OR < MOD_ASSIGN).


state 37

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, RP]
    9           | expression BIT_AND expression .  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, RP]
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    BIT_OR      shift, and go to state 21
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23
    EXC_OR      shift, and go to state 24

    $default  reduce using rule 9 (expression)

    Conflict between rule 9 and token ADD resolved as reduce (ADD < BIT_AND).
    Conflict between rule 9 and token SUB resolved as reduce (SUB < BIT_AND).
    Conflict between rule 9 and token MUL resolved as reduce (MUL < BIT_AND).
    Conflict between rule 9 and token DIV resolved as reduce (DIV < BIT_AND).
    Conflict between rule 9 and token MOD resolved as reduce (MOD < BIT_AND).
    Conflict between rule 9 and token ASSIGN resolved as shift (BIT_AND < ASSIGN).
    Conflict between rule 9 and token ADD_ASSIGN resolved as shift (BIT_AND < ADD_ASSIGN).
    Conflict between rule 9 and token SUB_ASSIGN resolved as shift (BIT_AND < SUB_ASSIGN).
    Conflict between rule 9 and token MUL_ASSIGN resolved as shift (BIT_AND < MUL_ASSIGN).
    Conflict between rule 9 and token DIV_ASSIGN resolved as shift (BIT_AND < DIV_ASSIGN).
    Conflict between rule 9 and token MOD_ASSIGN resolved as shift (BIT_AND < MOD_ASSIGN).
    Conflict between rule 9 and token BIT_AND resolved as reduce (%left BIT_AND).
    Conflict between rule 9 and token BIT_OR resolved as shift (BIT_AND < BIT_OR).
    Conflict between rule 9 and token LOGIC_AND resolved as shift (BIT_AND < LOGIC_AND).
    Conflict between rule 9 and token LOGIC_OR resolved as shift (BIT_AND < LOGIC_OR).
    Conflict between rule 9 and token EXC_OR resolved as shift (BIT_AND < EXC_OR).


state 38

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, BIT_OR, RP, EXC_OR]
    8           | expression BIT_OR expression .  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, BIT_OR, RP, EXC_OR]
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23

    $default  reduce using rule 8 (expression)

    Conflict between rule 8 and token ADD resolved as reduce (ADD < BIT_OR).
    Conflict between rule 8 and token SUB resolved as reduce (SUB < BIT_OR).
    Conflict between rule 8 and token MUL resolved as reduce (MUL < BIT_OR).
    Conflict between rule 8 and token DIV resolved as reduce (DIV < BIT_OR).
    Conflict between rule 8 and token MOD resolved as reduce (MOD < BIT_OR).
    Conflict between rule 8 and token ASSIGN resolved as shift (BIT_OR < ASSIGN).
    Conflict between rule 8 and token ADD_ASSIGN resolved as shift (BIT_OR < ADD_ASSIGN).
    Conflict between rule 8 and token SUB_ASSIGN resolved as shift (BIT_OR < SUB_ASSIGN).
    Conflict between rule 8 and token MUL_ASSIGN resolved as shift (BIT_OR < MUL_ASSIGN).
    Conflict between rule 8 and token DIV_ASSIGN resolved as shift (BIT_OR < DIV_ASSIGN).
    Conflict between rule 8 and token MOD_ASSIGN resolved as shift (BIT_OR < MOD_ASSIGN).
    Conflict between rule 8 and token BIT_AND resolved as reduce (BIT_AND < BIT_OR).
    Conflict between rule 8 and token BIT_OR resolved as reduce (%left BIT_OR).
    Conflict between rule 8 and token LOGIC_AND resolved as shift (BIT_OR < LOGIC_AND).
    Conflict between rule 8 and token LOGIC_OR resolved as shift (BIT_OR < LOGIC_OR).
    Conflict between rule 8 and token EXC_OR resolved as reduce (EXC_OR < BIT_OR).


state 39

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, BIT_OR, LOGIC_AND, RP, EXC_OR]
   12           | expression LOGIC_AND expression .  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, BIT_OR, LOGIC_AND, RP, EXC_OR]
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    LOGIC_OR    shift, and go to state 23

    $default  reduce using rule 12 (expression)

    Conflict between rule 12 and token ADD resolved as reduce (ADD < LOGIC_AND).
    Conflict between rule 12 and token SUB resolved as reduce (SUB < LOGIC_AND).
    Conflict between rule 12 and token MUL resolved as reduce (MUL < LOGIC_AND).
    Conflict between rule 12 and token DIV resolved as reduce (DIV < LOGIC_AND).
    Conflict between rule 12 and token MOD resolved as reduce (MOD < LOGIC_AND).
    Conflict between rule 12 and token ASSIGN resolved as shift (LOGIC_AND < ASSIGN).
    Conflict between rule 12 and token ADD_ASSIGN resolved as shift (LOGIC_AND < ADD_ASSIGN).
    Conflict between rule 12 and token SUB_ASSIGN resolved as shift (LOGIC_AND < SUB_ASSIGN).
    Conflict between rule 12 and token MUL_ASSIGN resolved as shift (LOGIC_AND < MUL_ASSIGN).
    Conflict between rule 12 and token DIV_ASSIGN resolved as shift (LOGIC_AND < DIV_ASSIGN).
    Conflict between rule 12 and token MOD_ASSIGN resolved as shift (LOGIC_AND < MOD_ASSIGN).
    Conflict between rule 12 and token BIT_AND resolved as reduce (BIT_AND < LOGIC_AND).
    Conflict between rule 12 and token BIT_OR resolved as reduce (BIT_OR < LOGIC_AND).
    Conflict between rule 12 and token LOGIC_AND resolved as reduce (%left LOGIC_AND).
    Conflict between rule 12 and token LOGIC_OR resolved as shift (LOGIC_AND < LOGIC_OR).
    Conflict between rule 12 and token EXC_OR resolved as reduce (EXC_OR < LOGIC_AND).


state 40

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression
   11           | expression . LOGIC_OR expression  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   11           | expression LOGIC_OR expression .  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, BIT_OR, LOGIC_AND, LOGIC_OR, RP, EXC_OR]
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19

    $default  reduce using rule 11 (expression)

    Conflict between rule 11 and token ADD resolved as reduce (ADD < LOGIC_OR).
    Conflict between rule 11 and token SUB resolved as reduce (SUB < LOGIC_OR).
    Conflict between rule 11 and token MUL resolved as reduce (MUL < LOGIC_OR).
    Conflict between rule 11 and token DIV resolved as reduce (DIV < LOGIC_OR).
    Conflict between rule 11 and token MOD resolved as reduce (MOD < LOGIC_OR).
    Conflict between rule 11 and token ASSIGN resolved as shift (LOGIC_OR < ASSIGN).
    Conflict between rule 11 and token ADD_ASSIGN resolved as shift (LOGIC_OR < ADD_ASSIGN).
    Conflict between rule 11 and token SUB_ASSIGN resolved as shift (LOGIC_OR < SUB_ASSIGN).
    Conflict between rule 11 and token MUL_ASSIGN resolved as shift (LOGIC_OR < MUL_ASSIGN).
    Conflict between rule 11 and token DIV_ASSIGN resolved as shift (LOGIC_OR < DIV_ASSIGN).
    Conflict between rule 11 and token MOD_ASSIGN resolved as shift (LOGIC_OR < MOD_ASSIGN).
    Conflict between rule 11 and token BIT_AND resolved as reduce (BIT_AND < LOGIC_OR).
    Conflict between rule 11 and token BIT_OR resolved as reduce (BIT_OR < LOGIC_OR).
    Conflict between rule 11 and token LOGIC_AND resolved as reduce (LOGIC_AND < LOGIC_OR).
    Conflict between rule 11 and token LOGIC_OR resolved as reduce (%left LOGIC_OR).
    Conflict between rule 11 and token EXC_OR resolved as reduce (EXC_OR < LOGIC_OR).


state 41

    3 expression: expression . ADD expression
    4           | expression . SUB expression
    5           | expression . MUL expression
    6           | expression . DIV expression
    7           | expression . MOD expression
    8           | expression . BIT_OR expression
    9           | expression . BIT_AND expression
   10           | expression . EXC_OR expression  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, RP, EXC_OR]
   10           | expression EXC_OR expression .  [$end, ADD, SUB, MUL, DIV, MOD, BIT_AND, RP, EXC_OR]
   11           | expression . LOGIC_OR expression
   12           | expression . LOGIC_AND expression
   13           | expression . ASSIGN expression
   14           | expression . ADD_ASSIGN expression
   15           | expression . SUB_ASSIGN expression
   16           | expression . MUL_ASSIGN expression
   17           | expression . DIV_ASSIGN expression
   18           | expression . MOD_ASSIGN expression

    ASSIGN      shift, and go to state 14
    ADD_ASSIGN  shift, and go to state 15
    SUB_ASSIGN  shift, and go to state 16
    MUL_ASSIGN  shift, and go to state 17
    DIV_ASSIGN  shift, and go to state 18
    MOD_ASSIGN  shift, and go to state 19
    BIT_OR      shift, and go to state 21
    LOGIC_AND   shift, and go to state 22
    LOGIC_OR    shift, and go to state 23

    $default  reduce using rule 10 (expression)

    Conflict between rule 10 and token ADD resolved as reduce (ADD < EXC_OR).
    Conflict between rule 10 and token SUB resolved as reduce (SUB < EXC_OR).
    Conflict between rule 10 and token MUL resolved as reduce (MUL < EXC_OR).
    Conflict between rule 10 and token DIV resolved as reduce (DIV < EXC_OR).
    Conflict between rule 10 and token MOD resolved as reduce (MOD < EXC_OR).
    Conflict between rule 10 and token ASSIGN resolved as shift (EXC_OR < ASSIGN).
    Conflict between rule 10 and token ADD_ASSIGN resolved as shift (EXC_OR < ADD_ASSIGN).
    Conflict between rule 10 and token SUB_ASSIGN resolved as shift (EXC_OR < SUB_ASSIGN).
    Conflict between rule 10 and token MUL_ASSIGN resolved as shift (EXC_OR < MUL_ASSIGN).
    Conflict between rule 10 and token DIV_ASSIGN resolved as shift (EXC_OR < DIV_ASSIGN).
    Conflict between rule 10 and token MOD_ASSIGN resolved as shift (EXC_OR < MOD_ASSIGN).
    Conflict between rule 10 and token BIT_AND resolved as reduce (BIT_AND < EXC_OR).
    Conflict between rule 10 and token BIT_OR resolved as shift (EXC_OR < BIT_OR).
    Conflict between rule 10 and token LOGIC_AND resolved as shift (EXC_OR < LOGIC_AND).
    Conflict between rule 10 and token LOGIC_OR resolved as shift (EXC_OR < LOGIC_OR).
    Conflict between rule 10 and token EXC_OR resolved as reduce (%left EXC_OR).
